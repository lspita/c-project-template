name: CI

on:
  workflow_dispatch:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

# Cancel in-progress runs for the same workflow + branch/PR
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CMAKE_PRESET: ci-workflow

jobs:
  nix-setup:
    name: Nix setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Install nix
        uses: DeterminateSystems/nix-installer-action@v20

      - name: Setup nix cache
        uses: DeterminateSystems/magic-nix-cache-action@v13

      - name: Build devshell
        run: nix develop

  cmake-setup:
    name: CMake setup
    runs-on: ubuntu-latest
    needs: nix-setup
    steps:
      - name: Configure cmake
        run: |
          nix develop --command cmake --preset ${{ env.CMAKE_PRESET }}

  format-check:
    name: Format check
    runs-on: ubuntu-latest
    needs: nix-setup
    steps:
      - name: Check formatting
        run: |
          nix develop --command bash -c '
            find . -name '*.c' -o -name '*.h' -o -name '*.cpp' -o -name '*.hpp'
            -exec clang-format --dry-run --Werror {} +
          '

  clang-tidy:
    name: Static analysis
    runs-on: ubuntu-latest
    needs: cmake-setup
    steps:
      - name: Run clang-tidy
        run: |
          nix develop --command run-clang-tidy -p build/bin/${{ env.CMAKE_PRESET }}

  build:
    name: Build (${{ matrix.build_type }}, ${{ matrix.compiler }})
    runs-on: ubuntu-latest
    needs: [cmake-setup, format-check, clang-tidy]
    strategy:
      fail-fast: false
      matrix: &build_matrix
        build_type: [Debug, Release]
        compiler: [gcc, clang]
        include:
          - compiler: gcc
            c_compiler: gcc
            cpp_compiler: g++
          - compiler: clang
            c_compiler: clang
            cpp_compiler: clang++

    steps:
      - name: Build
        run: |
          nix develop --command cmake --build \
            --preset ${{ env.CMAKE_PRESET }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: build/bin/${{ env.CMAKE_PRESET }}

  test:
    name: Test (${{ matrix.build_type }}, ${{ matrix.compiler }})
    runs-on: ubuntu-latest
    needs: build
    strategy:
      fail-fast: false
      matrix: *build_matrix

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-${{ matrix.compiler }}-${{ matrix.build_type }}
          path: build/bin/${{ env.CMAKE_PRESET }}

      - name: Run tests
        run: |
          nix develop --command ctest \
            --preset ${{ env.CMAKE_PRESET }} \
            -DCMAKE_C_COMPILER=${{ matrix.c_compiler }} \
            -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }} \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            --output-on-failure
